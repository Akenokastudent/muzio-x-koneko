"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/*

Mersenne Twister in JavaScript based on "mt19937ar.c"

 * JavaScript version by Magicant: Copyright (C) 2005 Magicant


 * Original C version by Makoto Matsumoto and Takuji Nishimura
   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt.html

Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
All rights reserved.

*/
var W = 32;
var N = 624;
var M = 397;
var R = 31;
var U = 11;
var S = 7;
var T = 15;
var L = 18;
var A = 0x9908B0DF;
var B = 0x9D2C5680;
var C = 0xEFC60000;
var UPPER_MASK = parseInt(__spreadArrays(Array(W - R)).map(function () { return '1'; }).reduce(function (x, y) { return x + y; }).concat(__spreadArrays(Array(R)).map(function () { return '0'; }).reduce(function (x, y) { return x + y; }), ''), 2);
var LOWER_MASK = parseInt(__spreadArrays(Array(W - R)).map(function () { return '0'; }).reduce(function (x, y) { return x + y; }).concat(__spreadArrays(Array(R)).map(function () { return '1'; }).reduce(function (x, y) { return x + y; }), ''), 2);
var mulUint32 = function (a, b) {
    var a1 = a >>> 16, a2 = a & 0xffff;
    var b1 = b >>> 16, b2 = b & 0xffff;
    return (((a1 * b2 + a2 * b1) << 16) + a2 * b2) >>> 0;
};
exports.newRandGen = function (seed) {
    var state = { i: 0, x: [seed >>> 0] };
    for (var j = 1; j < N; j++) {
        state.x[j] = (mulUint32(1812433253, state.x[j - 1] ^ (state.x[j - 1] >>> 30)) + j);
    }
    return state;
};
exports.randNext = function (state) {
    var newi = (state.i + 1) % N;
    var z = state.x[state.i] & UPPER_MASK | state.x[newi] & LOWER_MASK;
    var newx = __spreadArrays(state.x, [state.x[(state.i + M) % N] ^ (z >>> 1) ^ ((z & 1) == 0 ? 0 : A)]);
    var newState = { i: newi, x: newx };
    var y = newState.x[newState.i];
    y = y ^ (y >>> U);
    y = y ^ ((y << S) & B);
    y = y ^ ((y << T) & C);
    y = y ^ (y >>> L);
    return [y >>> 0, newState];
};
exports.randRange = function (min, sup_, state) {
    var sup = sup_ - min;
    if (!(0 < sup && sup < 0x100000000)) {
        var _a = exports.randNext(state), n_1 = _a[0], newState_1 = _a[1];
        return [n_1 + min, newState_1];
    }
    if ((sup & (~sup + 1)) == sup) {
        var _b = exports.randNext(state), n_2 = _b[0], newState_2 = _b[1];
        return [((sup - 1) & n_2) + min, newState_2];
    }
    var _c = exports.randNext(state), n = _c[0], newState = _c[1];
    while (sup > 4294967296 - (n - (n %= sup))) {
        var _d = exports.randNext(newState), n_ = _d[0], newState_ = _d[1];
        n = n_;
        newState = newState_;
    }
    return [n + min, newState];
};
//# sourceMappingURL=index.js.map