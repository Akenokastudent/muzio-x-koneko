"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffle = exports["default"] = void 0;

var _fnMt = require("fn-mt");

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * This is the algorithm. Random should be a function that when given
 * an integer, returns an integer 0..n. I have a hunch most of the time
 * we will just get a seed, but if you're reading this please tell me
 * if you ever send in your own randomizer :)
 */
var fisherYatesShuffle = function fisherYatesShuffle(random) {
  return function (sourceArray) {
    var clone = sourceArray.slice(0);
    var sourceIndex = sourceArray.length;
    var destinationIndex = 0;
    var shuffled = new Array(sourceIndex);

    while (sourceIndex) {
      var randomIndex = random(sourceIndex);
      shuffled[destinationIndex++] = clone[randomIndex];
      clone[randomIndex] = clone[--sourceIndex];
    }

    return shuffled;
  };
};

var randomInt = function randomInt() {
  return Math.random() * Math.pow(2, 32) | 0;
};

var randomExternal = function randomExternal(random) {
  return function (maxIndex) {
    return random() / Math.pow(2, 32) * maxIndex | 0;
  };
};

var randomInternal = function randomInternal(random) {
  var randState = (0, _fnMt.newRandGen)(random);
  return function (maxIndex) {
    var _randRange = (0, _fnMt.randRange)(0, maxIndex, randState),
        _randRange2 = _slicedToArray(_randRange, 2),
        nextInt = _randRange2[0],
        nextState = _randRange2[1];

    randState = nextState;
    return nextInt;
  };
};

var randomSwitch = function randomSwitch(random) {
  return (typeof random === 'function' ? randomExternal : randomInternal)(random);
};

var functionalShuffle = function functionalShuffle(deck, state) {
  var randState = (0, _fnMt.newRandGen)(state);

  var random = function random(maxIndex) {
    var _randRange3 = (0, _fnMt.randRange)(0, maxIndex, randState),
        _randRange4 = _slicedToArray(_randRange3, 2),
        nextInt = _randRange4[0],
        nextState = _randRange4[1];

    randState = nextState;
    return nextInt;
  };

  return [fisherYatesShuffle(random)(deck), (0, _fnMt.randNext)(randState)[0]];
};

var fastShuffle = function fastShuffle(randomSeed, deck) {
  if (_typeof(randomSeed) === 'object') {
    var _randomSeed = _slicedToArray(randomSeed, 2),
        fnDeck = _randomSeed[0],
        _randomSeed$ = _randomSeed[1],
        fnState = _randomSeed$ === void 0 ? randomInt() : _randomSeed$;

    return functionalShuffle(fnDeck, fnState);
  }

  var random = randomSwitch(randomSeed);
  var shuffler = fisherYatesShuffle(random); // if no second param given, return a curried shuffler

  if (deck === undefined) return shuffler;
  return shuffler(deck);
};

var shuffle = fastShuffle(randomInt());
exports.shuffle = shuffle;
var _default = fastShuffle;
exports["default"] = _default;